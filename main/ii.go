package main

import (
	"fmt"
	"os"
	"sort"
	"strings"
	"unicode"

	"github.com/wangzz719/mit-6.824/src/mapreduce"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapFII(document string, value string) (res []mapreduce.KeyValue) {
	// Your code here (Part V).
	f := func(c rune) bool {
		return !unicode.IsLetter(c)
	}
	keys := strings.FieldsFunc(value, f)
	keyValues := make([]mapreduce.KeyValue, 0)
	for _, key := range keys {
		keyValues = append(keyValues, mapreduce.KeyValue{Key: key, Value: document})
	}
	return keyValues
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceFII(key string, values []string) string {
	// Your code here (Part V).
	valueMap := make(map[string]bool)
	valuesSet := make([]string, 0)
	for _, v := range values {
		if _, ok := valueMap[v]; !ok {
			valueMap[v] = true
			valuesSet = append(valuesSet, v)
		}
	}

	sort.Slice(valuesSet, func(i, j int) bool {
		return valuesSet[i] < valuesSet[j]
	})
	return fmt.Sprintf("%d %s", len(valuesSet), strings.Join(valuesSet, ","))
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapFII, reduceFII)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapFII, reduceFII, 100, nil)
	}
}
